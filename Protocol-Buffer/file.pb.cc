// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file.proto

#include "file.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_file_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FilePerson_file_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_file_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilePerson_FileProperties_file_2eproto;
namespace textfile {
class FilePerson_FilePropertiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilePerson_FileProperties> _instance;
} _FilePerson_FileProperties_default_instance_;
class FilePersonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilePerson> _instance;
} _FilePerson_default_instance_;
class FilePersonBookDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilePersonBook> _instance;
} _FilePersonBook_default_instance_;
}  // namespace textfile
static void InitDefaultsscc_info_FilePerson_file_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::textfile::_FilePerson_default_instance_;
    new (ptr) ::textfile::FilePerson();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::textfile::FilePerson::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FilePerson_file_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FilePerson_file_2eproto}, {
      &scc_info_FilePerson_FileProperties_file_2eproto.base,}};

static void InitDefaultsscc_info_FilePerson_FileProperties_file_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::textfile::_FilePerson_FileProperties_default_instance_;
    new (ptr) ::textfile::FilePerson_FileProperties();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::textfile::FilePerson_FileProperties::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilePerson_FileProperties_file_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FilePerson_FileProperties_file_2eproto}, {}};

static void InitDefaultsscc_info_FilePersonBook_file_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::textfile::_FilePersonBook_default_instance_;
    new (ptr) ::textfile::FilePersonBook();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::textfile::FilePersonBook::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FilePersonBook_file_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FilePersonBook_file_2eproto}, {
      &scc_info_FilePerson_file_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_file_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_file_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_file_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_file_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::textfile::FilePerson_FileProperties, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::textfile::FilePerson_FileProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::textfile::FilePerson_FileProperties, fileid_),
  PROTOBUF_FIELD_OFFSET(::textfile::FilePerson_FileProperties, filename_),
  PROTOBUF_FIELD_OFFSET(::textfile::FilePerson_FileProperties, filecontent_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::textfile::FilePerson, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::textfile::FilePerson, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::textfile::FilePerson, userid_),
  PROTOBUF_FIELD_OFFSET(::textfile::FilePerson, file_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::textfile::FilePersonBook, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::textfile::FilePersonBook, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::textfile::FilePersonBook, people_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::textfile::FilePerson_FileProperties)},
  { 11, 18, sizeof(::textfile::FilePerson)},
  { 20, 26, sizeof(::textfile::FilePersonBook)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::textfile::_FilePerson_FileProperties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::textfile::_FilePerson_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::textfile::_FilePersonBook_default_instance_),
};

const char descriptor_table_protodef_file_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nfile.proto\022\010textfile\"\230\001\n\nFilePerson\022\016\n"
  "\006userid\030\001 \002(\005\0221\n\004file\030\002 \003(\0132#.textfile.F"
  "ilePerson.FileProperties\032G\n\016FileProperti"
  "es\022\016\n\006fileid\030\001 \002(\005\022\020\n\010filename\030\002 \002(\t\022\023\n\013"
  "filecontent\030\003 \002(\t\"6\n\016FilePersonBook\022$\n\006p"
  "eople\030\001 \003(\0132\024.textfile.FilePerson"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_file_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_file_2eproto_sccs[3] = {
  &scc_info_FilePerson_file_2eproto.base,
  &scc_info_FilePerson_FileProperties_file_2eproto.base,
  &scc_info_FilePersonBook_file_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_file_2eproto_once;
static bool descriptor_table_file_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_file_2eproto = {
  &descriptor_table_file_2eproto_initialized, descriptor_table_protodef_file_2eproto, "file.proto", 233,
  &descriptor_table_file_2eproto_once, descriptor_table_file_2eproto_sccs, descriptor_table_file_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_file_2eproto::offsets,
  file_level_metadata_file_2eproto, 3, file_level_enum_descriptors_file_2eproto, file_level_service_descriptors_file_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_file_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_file_2eproto), true);
namespace textfile {

// ===================================================================

void FilePerson_FileProperties::InitAsDefaultInstance() {
}
class FilePerson_FileProperties::_Internal {
 public:
  using HasBits = decltype(std::declval<FilePerson_FileProperties>()._has_bits_);
  static void set_has_fileid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filecontent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FilePerson_FileProperties::FilePerson_FileProperties()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:textfile.FilePerson.FileProperties)
}
FilePerson_FileProperties::FilePerson_FileProperties(const FilePerson_FileProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filename()) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  filecontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filecontent()) {
    filecontent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filecontent_);
  }
  fileid_ = from.fileid_;
  // @@protoc_insertion_point(copy_constructor:textfile.FilePerson.FileProperties)
}

void FilePerson_FileProperties::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FilePerson_FileProperties_file_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filecontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fileid_ = 0;
}

FilePerson_FileProperties::~FilePerson_FileProperties() {
  // @@protoc_insertion_point(destructor:textfile.FilePerson.FileProperties)
  SharedDtor();
}

void FilePerson_FileProperties::SharedDtor() {
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filecontent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FilePerson_FileProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilePerson_FileProperties& FilePerson_FileProperties::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FilePerson_FileProperties_file_2eproto.base);
  return *internal_default_instance();
}


void FilePerson_FileProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:textfile.FilePerson.FileProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      filecontent_.ClearNonDefaultToEmptyNoArena();
    }
  }
  fileid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FilePerson_FileProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 fileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fileid(&has_bits);
          fileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "textfile.FilePerson.FileProperties.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string filecontent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_filecontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "textfile.FilePerson.FileProperties.filecontent");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilePerson_FileProperties::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:textfile.FilePerson.FileProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 fileid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fileid(), target);
  }

  // required string filename = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "textfile.FilePerson.FileProperties.filename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_filename(), target);
  }

  // required string filecontent = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filecontent().data(), static_cast<int>(this->_internal_filecontent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "textfile.FilePerson.FileProperties.filecontent");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_filecontent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:textfile.FilePerson.FileProperties)
  return target;
}

size_t FilePerson_FileProperties::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:textfile.FilePerson.FileProperties)
  size_t total_size = 0;

  if (_internal_has_filename()) {
    // required string filename = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  if (_internal_has_filecontent()) {
    // required string filecontent = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filecontent());
  }

  if (_internal_has_fileid()) {
    // required int32 fileid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fileid());
  }

  return total_size;
}
size_t FilePerson_FileProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:textfile.FilePerson.FileProperties)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string filename = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());

    // required string filecontent = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filecontent());

    // required int32 fileid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fileid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilePerson_FileProperties::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:textfile.FilePerson.FileProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const FilePerson_FileProperties* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilePerson_FileProperties>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:textfile.FilePerson.FileProperties)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:textfile.FilePerson.FileProperties)
    MergeFrom(*source);
  }
}

void FilePerson_FileProperties::MergeFrom(const FilePerson_FileProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:textfile.FilePerson.FileProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      filecontent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filecontent_);
    }
    if (cached_has_bits & 0x00000004u) {
      fileid_ = from.fileid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FilePerson_FileProperties::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:textfile.FilePerson.FileProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilePerson_FileProperties::CopyFrom(const FilePerson_FileProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:textfile.FilePerson.FileProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilePerson_FileProperties::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void FilePerson_FileProperties::InternalSwap(FilePerson_FileProperties* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filecontent_.Swap(&other->filecontent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fileid_, other->fileid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FilePerson_FileProperties::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FilePerson::InitAsDefaultInstance() {
}
class FilePerson::_Internal {
 public:
  using HasBits = decltype(std::declval<FilePerson>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FilePerson::FilePerson()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:textfile.FilePerson)
}
FilePerson::FilePerson(const FilePerson& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      file_(from.file_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:textfile.FilePerson)
}

void FilePerson::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FilePerson_file_2eproto.base);
  userid_ = 0;
}

FilePerson::~FilePerson() {
  // @@protoc_insertion_point(destructor:textfile.FilePerson)
  SharedDtor();
}

void FilePerson::SharedDtor() {
}

void FilePerson::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilePerson& FilePerson::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FilePerson_file_2eproto.base);
  return *internal_default_instance();
}


void FilePerson::Clear() {
// @@protoc_insertion_point(message_clear_start:textfile.FilePerson)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_.Clear();
  userid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FilePerson::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .textfile.FilePerson.FileProperties file = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_file(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilePerson::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:textfile.FilePerson)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  // repeated .textfile.FilePerson.FileProperties file = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_file_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_file(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:textfile.FilePerson)
  return target;
}

size_t FilePerson::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:textfile.FilePerson)
  size_t total_size = 0;

  // required int32 userid = 1;
  if (_internal_has_userid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .textfile.FilePerson.FileProperties file = 2;
  total_size += 1UL * this->_internal_file_size();
  for (const auto& msg : this->file_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilePerson::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:textfile.FilePerson)
  GOOGLE_DCHECK_NE(&from, this);
  const FilePerson* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilePerson>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:textfile.FilePerson)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:textfile.FilePerson)
    MergeFrom(*source);
  }
}

void FilePerson::MergeFrom(const FilePerson& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:textfile.FilePerson)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_.MergeFrom(from.file_);
  if (from._internal_has_userid()) {
    _internal_set_userid(from._internal_userid());
  }
}

void FilePerson::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:textfile.FilePerson)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilePerson::CopyFrom(const FilePerson& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:textfile.FilePerson)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilePerson::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(file_)) return false;
  return true;
}

void FilePerson::InternalSwap(FilePerson* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_.InternalSwap(&other->file_);
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FilePerson::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FilePersonBook::InitAsDefaultInstance() {
}
class FilePersonBook::_Internal {
 public:
  using HasBits = decltype(std::declval<FilePersonBook>()._has_bits_);
};

FilePersonBook::FilePersonBook()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:textfile.FilePersonBook)
}
FilePersonBook::FilePersonBook(const FilePersonBook& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      people_(from.people_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:textfile.FilePersonBook)
}

void FilePersonBook::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FilePersonBook_file_2eproto.base);
}

FilePersonBook::~FilePersonBook() {
  // @@protoc_insertion_point(destructor:textfile.FilePersonBook)
  SharedDtor();
}

void FilePersonBook::SharedDtor() {
}

void FilePersonBook::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilePersonBook& FilePersonBook::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FilePersonBook_file_2eproto.base);
  return *internal_default_instance();
}


void FilePersonBook::Clear() {
// @@protoc_insertion_point(message_clear_start:textfile.FilePersonBook)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  people_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FilePersonBook::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .textfile.FilePerson people = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_people(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilePersonBook::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:textfile.FilePersonBook)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .textfile.FilePerson people = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_people_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_people(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:textfile.FilePersonBook)
  return target;
}

size_t FilePersonBook::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:textfile.FilePersonBook)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .textfile.FilePerson people = 1;
  total_size += 1UL * this->_internal_people_size();
  for (const auto& msg : this->people_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilePersonBook::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:textfile.FilePersonBook)
  GOOGLE_DCHECK_NE(&from, this);
  const FilePersonBook* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilePersonBook>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:textfile.FilePersonBook)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:textfile.FilePersonBook)
    MergeFrom(*source);
  }
}

void FilePersonBook::MergeFrom(const FilePersonBook& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:textfile.FilePersonBook)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  people_.MergeFrom(from.people_);
}

void FilePersonBook::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:textfile.FilePersonBook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilePersonBook::CopyFrom(const FilePersonBook& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:textfile.FilePersonBook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilePersonBook::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(people_)) return false;
  return true;
}

void FilePersonBook::InternalSwap(FilePersonBook* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  people_.InternalSwap(&other->people_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FilePersonBook::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace textfile
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::textfile::FilePerson_FileProperties* Arena::CreateMaybeMessage< ::textfile::FilePerson_FileProperties >(Arena* arena) {
  return Arena::CreateInternal< ::textfile::FilePerson_FileProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::textfile::FilePerson* Arena::CreateMaybeMessage< ::textfile::FilePerson >(Arena* arena) {
  return Arena::CreateInternal< ::textfile::FilePerson >(arena);
}
template<> PROTOBUF_NOINLINE ::textfile::FilePersonBook* Arena::CreateMaybeMessage< ::textfile::FilePersonBook >(Arena* arena) {
  return Arena::CreateInternal< ::textfile::FilePersonBook >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
