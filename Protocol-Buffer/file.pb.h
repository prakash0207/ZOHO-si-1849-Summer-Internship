// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_file_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_file_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_file_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_file_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_file_2eproto;
namespace textfile {
class FilePerson;
class FilePersonDefaultTypeInternal;
extern FilePersonDefaultTypeInternal _FilePerson_default_instance_;
class FilePersonBook;
class FilePersonBookDefaultTypeInternal;
extern FilePersonBookDefaultTypeInternal _FilePersonBook_default_instance_;
class FilePerson_FileProperties;
class FilePerson_FilePropertiesDefaultTypeInternal;
extern FilePerson_FilePropertiesDefaultTypeInternal _FilePerson_FileProperties_default_instance_;
}  // namespace textfile
PROTOBUF_NAMESPACE_OPEN
template<> ::textfile::FilePerson* Arena::CreateMaybeMessage<::textfile::FilePerson>(Arena*);
template<> ::textfile::FilePersonBook* Arena::CreateMaybeMessage<::textfile::FilePersonBook>(Arena*);
template<> ::textfile::FilePerson_FileProperties* Arena::CreateMaybeMessage<::textfile::FilePerson_FileProperties>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace textfile {

// ===================================================================

class FilePerson_FileProperties :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:textfile.FilePerson.FileProperties) */ {
 public:
  FilePerson_FileProperties();
  virtual ~FilePerson_FileProperties();

  FilePerson_FileProperties(const FilePerson_FileProperties& from);
  FilePerson_FileProperties(FilePerson_FileProperties&& from) noexcept
    : FilePerson_FileProperties() {
    *this = ::std::move(from);
  }

  inline FilePerson_FileProperties& operator=(const FilePerson_FileProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilePerson_FileProperties& operator=(FilePerson_FileProperties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FilePerson_FileProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FilePerson_FileProperties* internal_default_instance() {
    return reinterpret_cast<const FilePerson_FileProperties*>(
               &_FilePerson_FileProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FilePerson_FileProperties& a, FilePerson_FileProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(FilePerson_FileProperties* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilePerson_FileProperties* New() const final {
    return CreateMaybeMessage<FilePerson_FileProperties>(nullptr);
  }

  FilePerson_FileProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilePerson_FileProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilePerson_FileProperties& from);
  void MergeFrom(const FilePerson_FileProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilePerson_FileProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "textfile.FilePerson.FileProperties";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_file_2eproto);
    return ::descriptor_table_file_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 2,
    kFilecontentFieldNumber = 3,
    kFileidFieldNumber = 1,
  };
  // required string filename = 2;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // required string filecontent = 3;
  bool has_filecontent() const;
  private:
  bool _internal_has_filecontent() const;
  public:
  void clear_filecontent();
  const std::string& filecontent() const;
  void set_filecontent(const std::string& value);
  void set_filecontent(std::string&& value);
  void set_filecontent(const char* value);
  void set_filecontent(const char* value, size_t size);
  std::string* mutable_filecontent();
  std::string* release_filecontent();
  void set_allocated_filecontent(std::string* filecontent);
  private:
  const std::string& _internal_filecontent() const;
  void _internal_set_filecontent(const std::string& value);
  std::string* _internal_mutable_filecontent();
  public:

  // required int32 fileid = 1;
  bool has_fileid() const;
  private:
  bool _internal_has_fileid() const;
  public:
  void clear_fileid();
  ::PROTOBUF_NAMESPACE_ID::int32 fileid() const;
  void set_fileid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fileid() const;
  void _internal_set_fileid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:textfile.FilePerson.FileProperties)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filecontent_;
  ::PROTOBUF_NAMESPACE_ID::int32 fileid_;
  friend struct ::TableStruct_file_2eproto;
};
// -------------------------------------------------------------------

class FilePerson :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:textfile.FilePerson) */ {
 public:
  FilePerson();
  virtual ~FilePerson();

  FilePerson(const FilePerson& from);
  FilePerson(FilePerson&& from) noexcept
    : FilePerson() {
    *this = ::std::move(from);
  }

  inline FilePerson& operator=(const FilePerson& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilePerson& operator=(FilePerson&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FilePerson& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FilePerson* internal_default_instance() {
    return reinterpret_cast<const FilePerson*>(
               &_FilePerson_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FilePerson& a, FilePerson& b) {
    a.Swap(&b);
  }
  inline void Swap(FilePerson* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilePerson* New() const final {
    return CreateMaybeMessage<FilePerson>(nullptr);
  }

  FilePerson* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilePerson>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilePerson& from);
  void MergeFrom(const FilePerson& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilePerson* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "textfile.FilePerson";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_file_2eproto);
    return ::descriptor_table_file_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FilePerson_FileProperties FileProperties;

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 2,
    kUseridFieldNumber = 1,
  };
  // repeated .textfile.FilePerson.FileProperties file = 2;
  int file_size() const;
  private:
  int _internal_file_size() const;
  public:
  void clear_file();
  ::textfile::FilePerson_FileProperties* mutable_file(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::textfile::FilePerson_FileProperties >*
      mutable_file();
  private:
  const ::textfile::FilePerson_FileProperties& _internal_file(int index) const;
  ::textfile::FilePerson_FileProperties* _internal_add_file();
  public:
  const ::textfile::FilePerson_FileProperties& file(int index) const;
  ::textfile::FilePerson_FileProperties* add_file();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::textfile::FilePerson_FileProperties >&
      file() const;

  // required int32 userid = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:textfile.FilePerson)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::textfile::FilePerson_FileProperties > file_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  friend struct ::TableStruct_file_2eproto;
};
// -------------------------------------------------------------------

class FilePersonBook :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:textfile.FilePersonBook) */ {
 public:
  FilePersonBook();
  virtual ~FilePersonBook();

  FilePersonBook(const FilePersonBook& from);
  FilePersonBook(FilePersonBook&& from) noexcept
    : FilePersonBook() {
    *this = ::std::move(from);
  }

  inline FilePersonBook& operator=(const FilePersonBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilePersonBook& operator=(FilePersonBook&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FilePersonBook& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FilePersonBook* internal_default_instance() {
    return reinterpret_cast<const FilePersonBook*>(
               &_FilePersonBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FilePersonBook& a, FilePersonBook& b) {
    a.Swap(&b);
  }
  inline void Swap(FilePersonBook* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilePersonBook* New() const final {
    return CreateMaybeMessage<FilePersonBook>(nullptr);
  }

  FilePersonBook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilePersonBook>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilePersonBook& from);
  void MergeFrom(const FilePersonBook& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilePersonBook* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "textfile.FilePersonBook";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_file_2eproto);
    return ::descriptor_table_file_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeopleFieldNumber = 1,
  };
  // repeated .textfile.FilePerson people = 1;
  int people_size() const;
  private:
  int _internal_people_size() const;
  public:
  void clear_people();
  ::textfile::FilePerson* mutable_people(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::textfile::FilePerson >*
      mutable_people();
  private:
  const ::textfile::FilePerson& _internal_people(int index) const;
  ::textfile::FilePerson* _internal_add_people();
  public:
  const ::textfile::FilePerson& people(int index) const;
  ::textfile::FilePerson* add_people();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::textfile::FilePerson >&
      people() const;

  // @@protoc_insertion_point(class_scope:textfile.FilePersonBook)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::textfile::FilePerson > people_;
  friend struct ::TableStruct_file_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FilePerson_FileProperties

// required int32 fileid = 1;
inline bool FilePerson_FileProperties::_internal_has_fileid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FilePerson_FileProperties::has_fileid() const {
  return _internal_has_fileid();
}
inline void FilePerson_FileProperties::clear_fileid() {
  fileid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FilePerson_FileProperties::_internal_fileid() const {
  return fileid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FilePerson_FileProperties::fileid() const {
  // @@protoc_insertion_point(field_get:textfile.FilePerson.FileProperties.fileid)
  return _internal_fileid();
}
inline void FilePerson_FileProperties::_internal_set_fileid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  fileid_ = value;
}
inline void FilePerson_FileProperties::set_fileid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fileid(value);
  // @@protoc_insertion_point(field_set:textfile.FilePerson.FileProperties.fileid)
}

// required string filename = 2;
inline bool FilePerson_FileProperties::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FilePerson_FileProperties::has_filename() const {
  return _internal_has_filename();
}
inline void FilePerson_FileProperties::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FilePerson_FileProperties::filename() const {
  // @@protoc_insertion_point(field_get:textfile.FilePerson.FileProperties.filename)
  return _internal_filename();
}
inline void FilePerson_FileProperties::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:textfile.FilePerson.FileProperties.filename)
}
inline std::string* FilePerson_FileProperties::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:textfile.FilePerson.FileProperties.filename)
  return _internal_mutable_filename();
}
inline const std::string& FilePerson_FileProperties::_internal_filename() const {
  return filename_.GetNoArena();
}
inline void FilePerson_FileProperties::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FilePerson_FileProperties::set_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:textfile.FilePerson.FileProperties.filename)
}
inline void FilePerson_FileProperties::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:textfile.FilePerson.FileProperties.filename)
}
inline void FilePerson_FileProperties::set_filename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:textfile.FilePerson.FileProperties.filename)
}
inline std::string* FilePerson_FileProperties::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FilePerson_FileProperties::release_filename() {
  // @@protoc_insertion_point(field_release:textfile.FilePerson.FileProperties.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return filename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FilePerson_FileProperties::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:textfile.FilePerson.FileProperties.filename)
}

// required string filecontent = 3;
inline bool FilePerson_FileProperties::_internal_has_filecontent() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FilePerson_FileProperties::has_filecontent() const {
  return _internal_has_filecontent();
}
inline void FilePerson_FileProperties::clear_filecontent() {
  filecontent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FilePerson_FileProperties::filecontent() const {
  // @@protoc_insertion_point(field_get:textfile.FilePerson.FileProperties.filecontent)
  return _internal_filecontent();
}
inline void FilePerson_FileProperties::set_filecontent(const std::string& value) {
  _internal_set_filecontent(value);
  // @@protoc_insertion_point(field_set:textfile.FilePerson.FileProperties.filecontent)
}
inline std::string* FilePerson_FileProperties::mutable_filecontent() {
  // @@protoc_insertion_point(field_mutable:textfile.FilePerson.FileProperties.filecontent)
  return _internal_mutable_filecontent();
}
inline const std::string& FilePerson_FileProperties::_internal_filecontent() const {
  return filecontent_.GetNoArena();
}
inline void FilePerson_FileProperties::_internal_set_filecontent(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  filecontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FilePerson_FileProperties::set_filecontent(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  filecontent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:textfile.FilePerson.FileProperties.filecontent)
}
inline void FilePerson_FileProperties::set_filecontent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  filecontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:textfile.FilePerson.FileProperties.filecontent)
}
inline void FilePerson_FileProperties::set_filecontent(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  filecontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:textfile.FilePerson.FileProperties.filecontent)
}
inline std::string* FilePerson_FileProperties::_internal_mutable_filecontent() {
  _has_bits_[0] |= 0x00000002u;
  return filecontent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FilePerson_FileProperties::release_filecontent() {
  // @@protoc_insertion_point(field_release:textfile.FilePerson.FileProperties.filecontent)
  if (!_internal_has_filecontent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return filecontent_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FilePerson_FileProperties::set_allocated_filecontent(std::string* filecontent) {
  if (filecontent != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filecontent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filecontent);
  // @@protoc_insertion_point(field_set_allocated:textfile.FilePerson.FileProperties.filecontent)
}

// -------------------------------------------------------------------

// FilePerson

// required int32 userid = 1;
inline bool FilePerson::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FilePerson::has_userid() const {
  return _internal_has_userid();
}
inline void FilePerson::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FilePerson::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FilePerson::userid() const {
  // @@protoc_insertion_point(field_get:textfile.FilePerson.userid)
  return _internal_userid();
}
inline void FilePerson::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  userid_ = value;
}
inline void FilePerson::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:textfile.FilePerson.userid)
}

// repeated .textfile.FilePerson.FileProperties file = 2;
inline int FilePerson::_internal_file_size() const {
  return file_.size();
}
inline int FilePerson::file_size() const {
  return _internal_file_size();
}
inline void FilePerson::clear_file() {
  file_.Clear();
}
inline ::textfile::FilePerson_FileProperties* FilePerson::mutable_file(int index) {
  // @@protoc_insertion_point(field_mutable:textfile.FilePerson.file)
  return file_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::textfile::FilePerson_FileProperties >*
FilePerson::mutable_file() {
  // @@protoc_insertion_point(field_mutable_list:textfile.FilePerson.file)
  return &file_;
}
inline const ::textfile::FilePerson_FileProperties& FilePerson::_internal_file(int index) const {
  return file_.Get(index);
}
inline const ::textfile::FilePerson_FileProperties& FilePerson::file(int index) const {
  // @@protoc_insertion_point(field_get:textfile.FilePerson.file)
  return _internal_file(index);
}
inline ::textfile::FilePerson_FileProperties* FilePerson::_internal_add_file() {
  return file_.Add();
}
inline ::textfile::FilePerson_FileProperties* FilePerson::add_file() {
  // @@protoc_insertion_point(field_add:textfile.FilePerson.file)
  return _internal_add_file();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::textfile::FilePerson_FileProperties >&
FilePerson::file() const {
  // @@protoc_insertion_point(field_list:textfile.FilePerson.file)
  return file_;
}

// -------------------------------------------------------------------

// FilePersonBook

// repeated .textfile.FilePerson people = 1;
inline int FilePersonBook::_internal_people_size() const {
  return people_.size();
}
inline int FilePersonBook::people_size() const {
  return _internal_people_size();
}
inline void FilePersonBook::clear_people() {
  people_.Clear();
}
inline ::textfile::FilePerson* FilePersonBook::mutable_people(int index) {
  // @@protoc_insertion_point(field_mutable:textfile.FilePersonBook.people)
  return people_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::textfile::FilePerson >*
FilePersonBook::mutable_people() {
  // @@protoc_insertion_point(field_mutable_list:textfile.FilePersonBook.people)
  return &people_;
}
inline const ::textfile::FilePerson& FilePersonBook::_internal_people(int index) const {
  return people_.Get(index);
}
inline const ::textfile::FilePerson& FilePersonBook::people(int index) const {
  // @@protoc_insertion_point(field_get:textfile.FilePersonBook.people)
  return _internal_people(index);
}
inline ::textfile::FilePerson* FilePersonBook::_internal_add_people() {
  return people_.Add();
}
inline ::textfile::FilePerson* FilePersonBook::add_people() {
  // @@protoc_insertion_point(field_add:textfile.FilePersonBook.people)
  return _internal_add_people();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::textfile::FilePerson >&
FilePersonBook::people() const {
  // @@protoc_insertion_point(field_list:textfile.FilePersonBook.people)
  return people_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace textfile

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_file_2eproto
