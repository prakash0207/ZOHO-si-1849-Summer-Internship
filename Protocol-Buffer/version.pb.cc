// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: version.proto

#include "version.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_version_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParticularFile_version_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_version_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParticularFile_Version_version_2eproto;
namespace version {
class ParticularFile_VersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParticularFile_Version> _instance;
} _ParticularFile_Version_default_instance_;
class ParticularFileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParticularFile> _instance;
} _ParticularFile_default_instance_;
class FileBookDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileBook> _instance;
} _FileBook_default_instance_;
}  // namespace version
static void InitDefaultsscc_info_FileBook_version_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::version::_FileBook_default_instance_;
    new (ptr) ::version::FileBook();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::version::FileBook::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FileBook_version_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FileBook_version_2eproto}, {
      &scc_info_ParticularFile_version_2eproto.base,}};

static void InitDefaultsscc_info_ParticularFile_version_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::version::_ParticularFile_default_instance_;
    new (ptr) ::version::ParticularFile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::version::ParticularFile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParticularFile_version_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ParticularFile_version_2eproto}, {
      &scc_info_ParticularFile_Version_version_2eproto.base,}};

static void InitDefaultsscc_info_ParticularFile_Version_version_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::version::_ParticularFile_Version_default_instance_;
    new (ptr) ::version::ParticularFile_Version();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::version::ParticularFile_Version::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParticularFile_Version_version_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ParticularFile_Version_version_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_version_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_version_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_version_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_version_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::version::ParticularFile_Version, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::version::ParticularFile_Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::version::ParticularFile_Version, versionno_),
  PROTOBUF_FIELD_OFFSET(::version::ParticularFile_Version, operationno_),
  PROTOBUF_FIELD_OFFSET(::version::ParticularFile_Version, filecontent_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::version::ParticularFile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::version::ParticularFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::version::ParticularFile, userid_),
  PROTOBUF_FIELD_OFFSET(::version::ParticularFile, fileid_),
  PROTOBUF_FIELD_OFFSET(::version::ParticularFile, ver_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::version::FileBook, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::version::FileBook, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::version::FileBook, file_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::version::ParticularFile_Version)},
  { 11, 19, sizeof(::version::ParticularFile)},
  { 22, 28, sizeof(::version::FileBook)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::version::_ParticularFile_Version_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::version::_ParticularFile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::version::_FileBook_default_instance_),
};

const char descriptor_table_protodef_version_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rversion.proto\022\007version\"\246\001\n\016ParticularF"
  "ile\022\016\n\006userid\030\001 \002(\005\022\016\n\006fileid\030\002 \002(\005\022,\n\003v"
  "er\030\003 \003(\0132\037.version.ParticularFile.Versio"
  "n\032F\n\007Version\022\021\n\tversionno\030\001 \002(\005\022\023\n\013opera"
  "tionno\030\002 \002(\005\022\023\n\013filecontent\030\003 \002(\t\"1\n\010Fil"
  "eBook\022%\n\004file\030\001 \003(\0132\027.version.Particular"
  "File"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_version_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_version_2eproto_sccs[3] = {
  &scc_info_FileBook_version_2eproto.base,
  &scc_info_ParticularFile_version_2eproto.base,
  &scc_info_ParticularFile_Version_version_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_version_2eproto_once;
static bool descriptor_table_version_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_version_2eproto = {
  &descriptor_table_version_2eproto_initialized, descriptor_table_protodef_version_2eproto, "version.proto", 244,
  &descriptor_table_version_2eproto_once, descriptor_table_version_2eproto_sccs, descriptor_table_version_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_version_2eproto::offsets,
  file_level_metadata_version_2eproto, 3, file_level_enum_descriptors_version_2eproto, file_level_service_descriptors_version_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_version_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_version_2eproto), true);
namespace version {

// ===================================================================

void ParticularFile_Version::InitAsDefaultInstance() {
}
class ParticularFile_Version::_Internal {
 public:
  using HasBits = decltype(std::declval<ParticularFile_Version>()._has_bits_);
  static void set_has_versionno(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_operationno(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_filecontent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ParticularFile_Version::ParticularFile_Version()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:version.ParticularFile.Version)
}
ParticularFile_Version::ParticularFile_Version(const ParticularFile_Version& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filecontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filecontent()) {
    filecontent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filecontent_);
  }
  ::memcpy(&versionno_, &from.versionno_,
    static_cast<size_t>(reinterpret_cast<char*>(&operationno_) -
    reinterpret_cast<char*>(&versionno_)) + sizeof(operationno_));
  // @@protoc_insertion_point(copy_constructor:version.ParticularFile.Version)
}

void ParticularFile_Version::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParticularFile_Version_version_2eproto.base);
  filecontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&versionno_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operationno_) -
      reinterpret_cast<char*>(&versionno_)) + sizeof(operationno_));
}

ParticularFile_Version::~ParticularFile_Version() {
  // @@protoc_insertion_point(destructor:version.ParticularFile.Version)
  SharedDtor();
}

void ParticularFile_Version::SharedDtor() {
  filecontent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ParticularFile_Version::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParticularFile_Version& ParticularFile_Version::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParticularFile_Version_version_2eproto.base);
  return *internal_default_instance();
}


void ParticularFile_Version::Clear() {
// @@protoc_insertion_point(message_clear_start:version.ParticularFile.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    filecontent_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&versionno_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&operationno_) -
        reinterpret_cast<char*>(&versionno_)) + sizeof(operationno_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ParticularFile_Version::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 versionno = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_versionno(&has_bits);
          versionno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 operationno = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_operationno(&has_bits);
          operationno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string filecontent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_filecontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "version.ParticularFile.Version.filecontent");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParticularFile_Version::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:version.ParticularFile.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 versionno = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_versionno(), target);
  }

  // required int32 operationno = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_operationno(), target);
  }

  // required string filecontent = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filecontent().data(), static_cast<int>(this->_internal_filecontent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "version.ParticularFile.Version.filecontent");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_filecontent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:version.ParticularFile.Version)
  return target;
}

size_t ParticularFile_Version::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:version.ParticularFile.Version)
  size_t total_size = 0;

  if (_internal_has_filecontent()) {
    // required string filecontent = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filecontent());
  }

  if (_internal_has_versionno()) {
    // required int32 versionno = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_versionno());
  }

  if (_internal_has_operationno()) {
    // required int32 operationno = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_operationno());
  }

  return total_size;
}
size_t ParticularFile_Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:version.ParticularFile.Version)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string filecontent = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filecontent());

    // required int32 versionno = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_versionno());

    // required int32 operationno = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_operationno());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParticularFile_Version::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:version.ParticularFile.Version)
  GOOGLE_DCHECK_NE(&from, this);
  const ParticularFile_Version* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParticularFile_Version>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:version.ParticularFile.Version)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:version.ParticularFile.Version)
    MergeFrom(*source);
  }
}

void ParticularFile_Version::MergeFrom(const ParticularFile_Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:version.ParticularFile.Version)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      filecontent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filecontent_);
    }
    if (cached_has_bits & 0x00000002u) {
      versionno_ = from.versionno_;
    }
    if (cached_has_bits & 0x00000004u) {
      operationno_ = from.operationno_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParticularFile_Version::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:version.ParticularFile.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParticularFile_Version::CopyFrom(const ParticularFile_Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:version.ParticularFile.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticularFile_Version::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ParticularFile_Version::InternalSwap(ParticularFile_Version* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filecontent_.Swap(&other->filecontent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(versionno_, other->versionno_);
  swap(operationno_, other->operationno_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParticularFile_Version::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ParticularFile::InitAsDefaultInstance() {
}
class ParticularFile::_Internal {
 public:
  using HasBits = decltype(std::declval<ParticularFile>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fileid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ParticularFile::ParticularFile()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:version.ParticularFile)
}
ParticularFile::ParticularFile(const ParticularFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ver_(from.ver_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&fileid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(fileid_));
  // @@protoc_insertion_point(copy_constructor:version.ParticularFile)
}

void ParticularFile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParticularFile_version_2eproto.base);
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fileid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(fileid_));
}

ParticularFile::~ParticularFile() {
  // @@protoc_insertion_point(destructor:version.ParticularFile)
  SharedDtor();
}

void ParticularFile::SharedDtor() {
}

void ParticularFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParticularFile& ParticularFile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParticularFile_version_2eproto.base);
  return *internal_default_instance();
}


void ParticularFile::Clear() {
// @@protoc_insertion_point(message_clear_start:version.ParticularFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ver_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&userid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fileid_) -
        reinterpret_cast<char*>(&userid_)) + sizeof(fileid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ParticularFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 fileid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fileid(&has_bits);
          fileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .version.ParticularFile.Version ver = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ver(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParticularFile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:version.ParticularFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 userid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  // required int32 fileid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fileid(), target);
  }

  // repeated .version.ParticularFile.Version ver = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ver_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_ver(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:version.ParticularFile)
  return target;
}

size_t ParticularFile::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:version.ParticularFile)
  size_t total_size = 0;

  if (_internal_has_userid()) {
    // required int32 userid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());
  }

  if (_internal_has_fileid()) {
    // required int32 fileid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fileid());
  }

  return total_size;
}
size_t ParticularFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:version.ParticularFile)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 userid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());

    // required int32 fileid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fileid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .version.ParticularFile.Version ver = 3;
  total_size += 1UL * this->_internal_ver_size();
  for (const auto& msg : this->ver_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParticularFile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:version.ParticularFile)
  GOOGLE_DCHECK_NE(&from, this);
  const ParticularFile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParticularFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:version.ParticularFile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:version.ParticularFile)
    MergeFrom(*source);
  }
}

void ParticularFile::MergeFrom(const ParticularFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:version.ParticularFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ver_.MergeFrom(from.ver_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      fileid_ = from.fileid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParticularFile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:version.ParticularFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParticularFile::CopyFrom(const ParticularFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:version.ParticularFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticularFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ver_)) return false;
  return true;
}

void ParticularFile::InternalSwap(ParticularFile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ver_.InternalSwap(&other->ver_);
  swap(userid_, other->userid_);
  swap(fileid_, other->fileid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParticularFile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FileBook::InitAsDefaultInstance() {
}
class FileBook::_Internal {
 public:
  using HasBits = decltype(std::declval<FileBook>()._has_bits_);
};

FileBook::FileBook()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:version.FileBook)
}
FileBook::FileBook(const FileBook& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      file_(from.file_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:version.FileBook)
}

void FileBook::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileBook_version_2eproto.base);
}

FileBook::~FileBook() {
  // @@protoc_insertion_point(destructor:version.FileBook)
  SharedDtor();
}

void FileBook::SharedDtor() {
}

void FileBook::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileBook& FileBook::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileBook_version_2eproto.base);
  return *internal_default_instance();
}


void FileBook::Clear() {
// @@protoc_insertion_point(message_clear_start:version.FileBook)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FileBook::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .version.ParticularFile file = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_file(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileBook::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:version.FileBook)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .version.ParticularFile file = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_file_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_file(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:version.FileBook)
  return target;
}

size_t FileBook::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:version.FileBook)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .version.ParticularFile file = 1;
  total_size += 1UL * this->_internal_file_size();
  for (const auto& msg : this->file_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileBook::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:version.FileBook)
  GOOGLE_DCHECK_NE(&from, this);
  const FileBook* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileBook>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:version.FileBook)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:version.FileBook)
    MergeFrom(*source);
  }
}

void FileBook::MergeFrom(const FileBook& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:version.FileBook)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_.MergeFrom(from.file_);
}

void FileBook::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:version.FileBook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileBook::CopyFrom(const FileBook& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:version.FileBook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileBook::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(file_)) return false;
  return true;
}

void FileBook::InternalSwap(FileBook* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_.InternalSwap(&other->file_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileBook::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace version
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::version::ParticularFile_Version* Arena::CreateMaybeMessage< ::version::ParticularFile_Version >(Arena* arena) {
  return Arena::CreateInternal< ::version::ParticularFile_Version >(arena);
}
template<> PROTOBUF_NOINLINE ::version::ParticularFile* Arena::CreateMaybeMessage< ::version::ParticularFile >(Arena* arena) {
  return Arena::CreateInternal< ::version::ParticularFile >(arena);
}
template<> PROTOBUF_NOINLINE ::version::FileBook* Arena::CreateMaybeMessage< ::version::FileBook >(Arena* arena) {
  return Arena::CreateInternal< ::version::FileBook >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
